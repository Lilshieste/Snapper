/////////////////////////////////////////////////////////////////////////////// FILENAME:    SimpleSelector.js// DATE:        9/14/2008// AUTHOR:      Joe Miller//// DESCRIPTION: Defines the class SimpleSelector, which has the capability//               of specifying selection coordinates through the use of//               simple mouse controls.//// REFERENCES:  Selector.js/////////////////////////////////////////////////////////////////////////////LSDev.Extensions.SnapperNS.SimpleSelector = function( target ) {    const EVENT_NAME_MOUSEUP = "mouseup";    const EVENT_NAME_MOUSEMOVE = "mousemove";    const EVENT_NAME_MOUSEDOWN = "mousedown";        const RECTANGLE_ID = "__simpleselector_rectangleWidget__";    const OVERLAY_ID = "__simpleselector_overlayWidget__";    const DIMENSIONS_ID = "__simpleselector_dimensionsWidget__";        const IS_PERSISTENT = true;    const BGCOLOR_DIMENSIONS = "#ffb9b7";    const ALLOW_DIMENSION_EDIT = false;    const LAYER_OVERLAY = 2000000;  // Just a really high number    const LAYER_SELECTION = LAYER_OVERLAY + 1;  // Right on top of the overlay    const LAYER_DIMENSIONS = LAYER_OVERLAY + 1;  // Right on top of the overlay        var self = this;        var selectionTarget = null;    var overlay = null;    var selectionRect = null;    var selectionDimensions = null;    var isSelecting = false;    var isActivated = false;        // The point at which the selection box starts (and pivots)    var pivotX = 0;    var pivotY = 0;        // The point at which the selection box ends    var endX = 0;    var endY = 0;        function initializeSelector( target ) {        selectionTarget = target;                overlay = getScreenOverlay( target );        selectionRect = getSelectionRectangle( target );        selectionDimensions = getSelectionDimensions( target );                isSelecting = false;        isActivated = false;                self.hide();    }        function getSelectionRectangle( theTarget ) {        var rect = new LSDev.Common.Javascript.Widgets.HtmlRectangleWidget( RECTANGLE_ID, theTarget );        rect.setLayer( LAYER_SELECTION );                return rect;    }        function getScreenOverlay( theTarget ) {        var theOverlay = overlay;        if( null == theOverlay ) {            var theOverlay = new LSDev.Common.Javascript.Widgets.HtmlImageCanvasWidget( OVERLAY_ID, theTarget );            theOverlay.setLayer( LAYER_OVERLAY );        }                return theOverlay;    }        function getSelectionDimensions( theTarget ) {        var display = new LSDev.Common.Javascript.Widgets.HtmlDimensionsDisplayWidget( DIMENSIONS_ID, theTarget, overlay );                display.setBackgroundColor( BGCOLOR_DIMENSIONS );        display.setModifiable( ALLOW_DIMENSION_EDIT );        display.setVisible( false );        display.setLayer( LAYER_DIMENSIONS );                return display;    }        this.initialize = function( target ) {        initializeSelector( target );    }        this.activate = function() {        if( !isActivated ) {            if( overlay == null ) {                overlay = getScreenOverlay( target );            }                        overlay.setVisible( true );            buildMouseEvents();                        isActivated = true;        }    }        this.deactivate = function() {        if( isActivated ) {            this.hide();                        resetOverlay();            selectionDimensions.setVisible( false );            destroyMouseEvents();                        isActivated = false;        }    }        this.isPersistent = function() {        return IS_PERSISTENT;    }        this.show = function() {        // If the selector is not currently selecting, then don't display it... no matter how much they pay you        if( isSelecting ) {            overlay.setVisible( true );            selectionRect.setVisible( true );            selectionDimensions.setVisible( true );        }    }        this.hide = function() {        selectionRect.setVisible( false );        selectionDimensions.setVisible( false );    }        this.getSelectionTarget = function() {        return selectionTarget;    }        this.setSelectionTarget = function( newTarget ) {        initializeSelector( newTarget );    }        this.getSelectionCoords = function() {        var selectionX = Math.min( pivotX, endX );        var selectionY = Math.min( pivotY, endY );        var selectionWidth = ( Math.max( pivotX, endX ) - selectionX );        var selectionHeight = ( Math.max( pivotY, endY ) - selectionY );                return new LSDev.Common.Javascript.Rectangle( selectionWidth, selectionHeight, selectionX, selectionY );    }        this.getLineColor = function() {        return selectionRect.getBorderColor();    }        this.setLineColor = function( lineColor ) {        selectionRect.setBorderColor( lineColor );    }        function updateDimensionsDisplay() {        selectionDimensions.setDimensionWidth( selectionRect.getWidth() );        selectionDimensions.setDimensionHeight( selectionRect.getHeight() );            updateDimensionsPosition();    }        function updateDimensionsPosition() {        var heightOffset = selectionDimensions.getHtmlNode().clientHeight;        var selectionPos = selectionRect.getPos();        var y;                if( ( selectionPos.getY() - heightOffset ) < 0 ) {            y = 0;        }        else {            y = selectionPos.getY() - heightOffset;        }                selectionDimensions.setPos( new LSDev.Common.Javascript.Point( selectionPos.getX(), y ) );    }        function callbackBeginSelection( e ) {        if( 0 == e.button && !isSelecting ) {            beginSelection( e.pageX, e.pageY );        }    }        function callbackUpdateSelection( e ) {        if( isSelecting ) {            updateSelection( e.pageX, e.pageY );        }    }        function callbackEndSelection( e ) {        if( 0 == e.button ) {            endSelection();                        if( self.getSelectionCoords().width > 0 &&                    self.getSelectionCoords().height > 0 )            {                self.onSelectionComplete.dispatchEvent();            }        }    }        function beginSelection( x, y ) {        isSelecting = true;                pivotX = endX = x;        pivotY = endY = y;                selectionRect.setPos( new LSDev.Common.Javascript.Point( x, y ) );                self.show();                updateDimensionsDisplay();    }        function endSelection() {        isSelecting = false;        reset();    }        function updateSelection( x, y ) {        if( isSelecting ) {            endX = x;            endY = y;                        var rect = self.getSelectionCoords();                        selectionRect.setPos( new LSDev.Common.Javascript.Point( rect.x, rect.y ) );            selectionRect.setWidth( rect.width );            selectionRect.setHeight( rect.height );                        updateDimensionsDisplay();        }    }        function reset() {        resetSelectionRectangle();        resetSelectionDimensions();                self.hide();    }        function resetSelectionDimensions() {        selectionDimensions.setVisible( false );        selectionDimensions.setPos( new LSDev.Common.Javascript.Point( 0, 0 ) );    }        function resetSelectionRectangle() {        selectionRect.setVisible( false );        selectionRect.setPos( new LSDev.Common.Javascript.Point( 0, 0 ) );        selectionRect.setWidth( 0 );        selectionRect.setHeight( 0 );    }        function resetOverlay() {        overlay.release();        overlay = null;    }        function buildMouseEvents() {        selectionTarget.addEventListener( EVENT_NAME_MOUSEDOWN, callbackBeginSelection, false );        selectionTarget.addEventListener( EVENT_NAME_MOUSEMOVE, callbackUpdateSelection, false );        selectionTarget.addEventListener( EVENT_NAME_MOUSEUP, callbackEndSelection, false );    }    function destroyMouseEvents() {        selectionTarget.removeEventListener( EVENT_NAME_MOUSEDOWN, callbackBeginSelection, false );        selectionTarget.removeEventListener( EVENT_NAME_MOUSEMOVE, callbackUpdateSelection, false );        selectionTarget.removeEventListener( EVENT_NAME_MOUSEUP, callbackEndSelection, false );    }        this.onSelectionComplete = new LSDev.Common.Javascript.GenericEvent();        this.initialize( target );}LSDev.Extensions.SnapperNS.SimpleSelector.prototype = LSDev.Extensions.SnapperNS.Selector;LSDev.Extensions.SnapperNS.SimpleSelector.prototype.base = LSDev.Extensions.SnapperNS.Selector;