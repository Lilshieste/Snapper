/////////////////////////////////////////////////////////////////////////////// FILENAME:    FrameSelector.js// DATE:        10/7/2009// AUTHOR:      Joe Miller//// DESCRIPTION: Defines the class FrameSelector, which has the capability//               of specifying selection coordinates for the contents of//               an entire HTML Frame.//// REFERENCES:  Selector.js/////////////////////////////////////////////////////////////////////////////LSDev.Extensions.SnapperNS.FrameSelector = function( target ) {    const IS_PERSISTENT = true;        const WIDTH_BORDER = 1;        const COLOR_BORDER = "#000000";    const COLOR_BACKGROUND = "#ffb9b7";        var self = this;        var selectionTarget = null;    var targetFrame = null;    var tagArray = new Array();    var isSelecting = false;    var isActivated = false;        function initializeSelector( target ) {        selectionTarget = target;                isSelecting = false;        isActivated = false;                self.hide();    }         this.initialize = function( target ) {        initializeSelector( target );    }        this.activate = function() {        if( !isActivated ) {            tagFrames();                        isActivated = true;            isSelecting = true;        }    }        this.deactivate = function() {        if( isActivated ) {            this.hide();                        untagFrames();                        isActivated = false;            isSelecting = false;        }    }        function tagFrames() {        var mainDoc = window.content.document;                // Tag the individual frames        for(var i = 0; i < mainDoc.defaultView.frames.length; i++) {            var theFrame = mainDoc.defaultView.frames[ i ];            var tag = new LSDev.Common.Javascript.Widgets.HtmlTagWidget(theFrame.name + "_tag", theFrame.document);            var text = document.getElementById( "snapper-strings" ).getString( "FrameIFrameTagText" );                        initializeTag( tag, text, theFrame.document );            tagArray.push(tag);        }                // Tag the main page too, while we're at it        var tag = new LSDev.Common.Javascript.Widgets.HtmlTagWidget(mainDoc.defaultView.name + "_tag", mainDoc);        var text = document.getElementById( "snapper-strings" ).getString( "FramePageTagText" );                initializeTag( tag, text, mainDoc );        tagArray.push(tag);    }        function initializeTag( tag, text, theDocument ) {        tag.setBackgroundColor( COLOR_BACKGROUND );        tag.setBorderColor( COLOR_BORDER );        tag.setBorderWidth( WIDTH_BORDER );        tag.setText( text );        tag.inheritWidth();        tag.inheritHeight();        var documentWidth = LSDev.Common.Javascript.Util.HtmlUtilities.GetVisibleDocumentWidth( theDocument );        var documentHeight = LSDev.Common.Javascript.Util.HtmlUtilities.GetVisibleDocumentHeight( theDocument );                var x = (documentWidth / 2) - (tag.getWidth() / 2);        var y = (documentHeight / 2) - (tag.getHeight() / 2);        tag.setPos(new LSDev.Common.Javascript.Point(x, y));                tag.onClick.addEventListener( tagClicked );    }        function untagFrames() {        for(var i = 0; i < tagArray.length; i++) {            tagArray[ i ].release();        }    }        function showTags() {        for( var i = 0; i < tagArray.length; i++ ) {            tagArray[ i ].setVisible( true );        }    }        function hideTags() {        for( var i = 0; i < tagArray.length; i++ ) {            tagArray[ i ].setVisible( false );        }    }        function tagClicked( e ) {        if( 0 == e.button ) {            if(isSelecting) {                var theTargetFrame = getTargetFrame(e.target);                                if(theTargetFrame != null) {                    selectionTarget = theTargetFrame.ownerDocument;                    self.onSelectionComplete.dispatchEvent();                }            }        }    }        this.isPersistent = function() {        return IS_PERSISTENT;    }        this.show = function() {        showTags();    }        this.hide = function() {        hideTags();    }        this.getSelectionTarget = function() {        return selectionTarget;    }        this.setSelectionTarget = function( newTarget ) {        initializeSelector( newTarget );    }        this.getSelectionCoords = function() {        var width = getWidth();        var height = getHeight();                return new LSDev.Common.Javascript.Rectangle( width, height, 0, 0);    }        function getWidth() {        return LSDev.Common.Javascript.Util.HtmlUtilities.GetFullDocumentWidth( selectionTarget )    }        function getHeight() {        return LSDev.Common.Javascript.Util.HtmlUtilities.GetFullDocumentHeight( selectionTarget )    }        this.getLineColor = function() {        return "#000000";    }        this.setLineColor = function( lineColor ) {        // Nothing to set    }        function beginSelection( x, y ) {        isSelecting = true;    }        function endSelection() {        isSelecting = false;    }        function getTargetFrame( elm ) {        var iter = elm;                do {            if(iter.tagName == "HTML") {                return iter;            }                        iter = iter.parentNode;        } while(iter != null);                return iter;    }        this.onSelectionComplete = new LSDev.Common.Javascript.GenericEvent();        this.initialize( target );}LSDev.Extensions.SnapperNS.FrameSelector.prototype = LSDev.Extensions.SnapperNS.Selector;LSDev.Extensions.SnapperNS.FrameSelector.prototype.base = LSDev.Extensions.SnapperNS.Selector;