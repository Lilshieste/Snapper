/////////////////////////////////////////////////////////////////////////////// FILENAME:    AnchoredSelector.js// DATE:        9/15/2008// AUTHOR:      Joe Miller//// DESCRIPTION: Defines the class AnchoredSelector, which has the//               capability of specifying selection coordinates, while//               allowing users to resize and move the selection.//// REFERENCES:  Selector.js/////////////////////////////////////////////////////////////////////////////LSDev.Extensions.SnapperNS.AnchoredSelector = function( target ) {    const EVENT_NAME_MOUSEUP = "mouseup";    const EVENT_NAME_MOUSEMOVE = "mousemove";    const EVENT_NAME_MOUSEDOWN = "mousedown";        const RECTANGLE_ID = "__anchoredselector_rectangleWidget__";    const OVERLAY_ID = "__anchoredselector_overlayWidget__";    const DIMENSIONS_ID = "__anchoredselector_dimensionsWidget__";    const WIDTH_LABEL_ID = "__anchoredselector_labelWidgetWidth__";    const BY_LABEL_ID = "__anchoredselector_labelWidgetBy__";    const HEIGHT_LABEL_ID = "__anchoredselector_labelWidgetHeight__";    const IS_PERSISTENT = true;    const BGCOLOR_DIMENSIONS = "#ffb9b7";    const ALLOW_DIMENSION_EDIT = true;    const LAYER_OVERLAY = 2000000;  // Just a really high number    const LAYER_SELECTION = LAYER_OVERLAY + 1;  // Right on top of the overlay    const LAYER_DIMENSIONS = LAYER_OVERLAY + 1;  // Right on top of the overlay        var self = this;    var selectionTarget = null;        // The point at which the selection box starts (and pivots)    var pivotX = 0;    var pivotY = 0;        // The point at which the selection box ends    var endX = 0;    var endY = 0;        var overlay = null;    var selectionRect = null;    var selectionLabelWidth = null;    var selectionLabelBy = null;    var selectionLabelHeight = null;    var selectionDimensions = null;    var isActivated = false;    var isSelecting = false;    var isDrawing = false;  // First stage of selection    var isAdjusting = false;        this.onSelectionComplete = new LSDev.Common.Javascript.GenericEvent();        this.initialize = function( target ) {        initializeSelector( target );    }        // TODO: Consider resurrecting this at some point...    //var boundingArea = null;        this.activate = function() {        if( !isActivated ) {            if( null == overlay ) {                overlay = getScreenOverlay( target );            }                        overlay.setVisible( true );            buildMouseEvents();                        // TODO: Consider resurrecting this at some point...            //setBoundingArea();                        isActivated = true;        }    }        // TODO: Consider resurrecting this at some point...    //function setBoundingArea() {    //    boundingArea = LSDev.Common.Javascript.Util.HtmlUtilities.GetBoundingRectangleForDocument( target );    //}        this.deactivate = function() {        if( isActivated ) {            resetOverlay();            resetSelectionRectangle();            selectionDimensions.setVisible( false );            destroyMouseEvents();                        isActivated = false;            isSelecting = false;        }    }        this.isPersistent = function() {        return IS_PERSISTENT;    }        this.show = function() {        overlay.setVisible( true );        selectionRect.setVisible( true );        selectionDimensions.setVisible( true );    }        this.hide = function() {        selectionRect.setVisible( false );        selectionDimensions.setVisible( false );    }        this.getSelectionTarget = function() {        return selectionTarget;    }        this.setSelectionTarget = function( newTarget ) {        initializeSelector( newTarget );    }        this.getSelectionCoords = function() {        return new LSDev.Common.Javascript.Rectangle( selectionRect.getWidth(), selectionRect.getHeight(), selectionRect.getPos().getX(), selectionRect.getPos().getY() );    }        this.getLineColor = function() {        return selectionRect.getBorderColor();    }        this.setLineColor = function( lineColor ) {        selectionRect.setBorderColor( lineColor );    }        function initializeSelector( newTarget ) {        selectionTarget = newTarget;                overlay = getScreenOverlay( newTarget );        selectionRect = getSelectionRectangle( newTarget );        selectionDimensions = getSelectionDimensionsDisplay( newTarget );                // TODO: Consider resurrecting this at some point...        //setBoundingArea();         isActivated = false;        isSelecting = false;        isDrawing = false;  // First stage of selection        isAdjusting = false;    }        function getSelectionRectangle( theTarget ) {        var rect = new LSDev.Common.Javascript.Widgets.HtmlRectangleWidget( RECTANGLE_ID, theTarget );                rect.onResize.addEventListener( selectionResized );        rect.onMove.addEventListener( selectionMoved );        rect.setVisible( false );        rect.setLayer( LAYER_SELECTION );                return rect;    }        function getScreenOverlay( theTarget ) {        var theOverlay = overlay;        if( null == theOverlay ) {            var theOverlay = new LSDev.Common.Javascript.Widgets.HtmlImageCanvasWidget( OVERLAY_ID, theTarget );            theOverlay.setLayer( LAYER_OVERLAY );        }                return theOverlay;    }        function getSelectionDimensionsDisplay( theTarget ) {        var display = new LSDev.Common.Javascript.Widgets.HtmlDimensionsDisplayWidget( DIMENSIONS_ID, theTarget, overlay);                display.setBackgroundColor( BGCOLOR_DIMENSIONS );        display.onBeforeDimensionsChange.addEventListener( beforeDimensionsChange );        display.onAfterDimensionsChange.addEventListener( afterDimensionsChange );        display.setModifiable( ALLOW_DIMENSION_EDIT );        display.setVisible( false );        display.setLayer( LAYER_DIMENSIONS );                return display;    }        function selectionResized() {        // TODO: Consider resurrecting this at some point...        //var rect = new LSDev.Common.Javascript.Rectangle( selectionRect.getWidth(), selectionRect.getHeight(), selectionRect.getPos().getX(), selectionRect.getPos().getY() );        //LSDev.Extensions.SnapperNS.SnapperUtilities.ReconcileRectangleWithBoundingRectangle( rect, boundingArea, true, false );        //selectionRect.setWidth( rect.width );        //selectionRect.setHeight( rect.height );        //selectionRect.setPos( new LSDev.Common.Javascript.Point( rect.x, rect.y ) );                updateDimensionsDisplay();    }        function selectionMoved() {        // TODO: Consider resurrecting this at some point...        //var rect = new LSDev.Common.Javascript.Rectangle( selectionRect.getWidth(), selectionRect.getHeight(), selectionRect.getPos().getX(), selectionRect.getPos().getY() );        //LSDev.Extensions.SnapperNS.SnapperUtilities.ReconcileRectangleWithBoundingRectangle( rect, boundingArea, false, true );        //selectionRect.setWidth( rect.width );        //selectionRect.setHeight( rect.height );        //selectionRect.setPos( new LSDev.Common.Javascript.Point( rect.x, rect.y ) );                updateDimensionsDisplay();    }        function updateDimensionsDisplay() {        selectionDimensions.setDimensionWidth( selectionRect.getWidth() );        selectionDimensions.setDimensionHeight( selectionRect.getHeight() );            updateDimensionsPosition();    }        function updateDimensionsPosition() {        var heightOffset = selectionDimensions.getHtmlNode().clientHeight;        var selectionPos = selectionRect.getPos();        var y;                if( ( selectionPos.getY() - heightOffset ) < 0 ) {            y = 0;        }        else {            y = selectionPos.getY() - heightOffset;        }                selectionDimensions.setPos( new LSDev.Common.Javascript.Point( selectionPos.getX(), y ) );    }        function beforeDimensionsChange() {            }        function afterDimensionsChange() {        selectionRect.setWidth( selectionDimensions.getDimensionWidth() );        selectionRect.setHeight( selectionDimensions.getDimensionHeight() );    }        function beforeWidthChanged() {            }        function afterWidthChanged() {        var newWidth = parseInt( selectionLabelWidth.getText() );                if( isNaN( newWidth ) ) {            selectionLabelWidth.setText( selectionRect.getWidth() );        }        else {            selectionRect.setWidth( newWidth );        }    }        function validateLabelValues() {            }        function getDrawingCoords() {        var selectionX = Math.max( Math.min( pivotX, endX ), 0 );        var selectionY = Math.max( Math.min( pivotY, endY ), 0 );        var selectionWidth = ( Math.max( pivotX, endX ) - selectionX );        var selectionHeight = ( Math.max( pivotY, endY ) - selectionY );        var rect = new LSDev.Common.Javascript.Rectangle( selectionWidth, selectionHeight, selectionX, selectionY );                // TODO: Consider resurrecting this at some point...        //LSDev.Extensions.SnapperNS.SnapperUtilities.ReconcileRectangleWithBoundingRectangle( rect, boundingArea );                return rect;    }        function mouseDownCallback( e ) {        if( 0 == e.button && !(isDrawing || isSelecting)) {            beginDrawing( e.pageX, e.pageY );        }    }        function mouseMoveCallback( e ) {        if( isDrawing ) {            updateDrawing( e.pageX, e.pageY );        }    }        function mouseUpCallback( e ) {        if( 0 == e.button ) {            if( isDrawing ) {                endDrawing();            }        }    }        function beginDrawing( x, y ) {        isDrawing = true;        isSelecting = true;                pivotX = endX = x;        pivotY = endY = y;                selectionRect.setPos( new LSDev.Common.Javascript.Point( x, y ) );        selectionRect.setVisible( true );        selectionDimensions.setVisible( true );    }        function endDrawing() {        isDrawing = false;        selectionRect.setMovable( true );        selectionRect.setResizable( true );                selectionRect.onDoubleClick.addEventListener(completeSelection);    }        function updateDrawing( x, y ) {        if( isDrawing ) {            endX = x;            endY = y;                        var rect = getDrawingCoords();                        selectionRect.setPos( new LSDev.Common.Javascript.Point( rect.x, rect.y ) );            selectionRect.setWidth( rect.width );            selectionRect.setHeight( rect.height );                        updateDimensionsDisplay();        }    }        function completeSelection( e ) {        self.onSelectionComplete.dispatchEvent();    }        function resetSelectionRectangle() {        selectionRect.setVisible( false );        selectionRect.setPos( new LSDev.Common.Javascript.Point( 0, 0 ) );        selectionRect.setWidth( 0 );        selectionRect.setHeight( 0 );                selectionRect.setMovable( false );        selectionRect.setResizable( false );    }        function resetOverlay() {        overlay.release();        overlay = null;    }        function buildMouseEvents() {        selectionTarget.addEventListener( EVENT_NAME_MOUSEDOWN, mouseDownCallback, false );        selectionTarget.addEventListener( EVENT_NAME_MOUSEMOVE, mouseMoveCallback, false );        selectionTarget.addEventListener( EVENT_NAME_MOUSEUP, mouseUpCallback, false );    }    function destroyMouseEvents() {        selectionTarget.removeEventListener( EVENT_NAME_MOUSEDOWN, mouseDownCallback, false);        selectionTarget.removeEventListener( EVENT_NAME_MOUSEMOVE, mouseMoveCallback, false );        selectionTarget.removeEventListener( EVENT_NAME_MOUSEUP, mouseUpCallback, false );    }        this.initialize( target );}LSDev.Extensions.SnapperNS.AnchoredSelector.prototype = LSDev.Extensions.SnapperNS.Selector;LSDev.Extensions.SnapperNS.AnchoredSelector.prototype.base = LSDev.Extensions.SnapperNS.Selector;