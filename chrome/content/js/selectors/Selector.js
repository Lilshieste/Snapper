/////////////////////////////////////////////////////////////////////////////// FILENAME:    Selector.js// DATE:        9/14/2008// AUTHOR:      Joe Miller//// DESCRIPTION: Defines the abstract class Selector, which serves as//               the base class for an object used to select a specified//               area.//// REFERENCES:  None./////////////////////////////////////////////////////////////////////////////LSDev.Extensions.SnapperNS.Selector = {    // Initializes the selector, for use on the specified target.    //    // PARAMS    // target (Object): The object on which the selector will operate.    //    // RETURNS void    initialize: function( target ) {        throw new Error( "Selector.initialize() is not defined for: " + this );    },    // Activates the selector, allow it to make a selection.    //    // RETURNS void    activate: function() {        throw new Error( "Selector.activate() is not defined for: " + this );    },        // Deactivates the selector, preventing it from making any further selection.     //    // RETURNS void    deactivate: function() {        throw new Error( "Selector.deactivate() is not defined for: " + this );    },        // Gets a value indicating whether or not the selector allows user-interaction immediately after deactivation.    //    // RETURNS Boolean    isPersistent: function() {        throw new Error( "Selector.isPersistent() is not defined for: " + this );    },        // Makes the selector visible to the user.    //    // RETURNS void    show: function() {        throw new Error( "Selector.show() is not defined for: " + this );    },        // Hides the selector from the user.    //    // RETURNS void    hide: function() {        throw new Error( "Selector.hide() is not defined for: " + this );    },        // Gets the object on which the selector will operate.    //    // RETURNS Object    getSelectionTarget: function() {        throw new Error( "Selector.getSelectionTarget() is not defined for: " + this );    },        // Sets the object on which the selector will operate.    //    // PARAMS    // newTarget (Object): The object on which the selector should operate.    //    // RETURNS void    setSelectionTarget: function( newTarget ) {        throw new Error( "Selector.setSelectionTarget() is not defined for: " + this );    },    // Gets the coordinates of the current selection, or null if the selector has    //  not been activated.    //    // RETURNS Rectangle  // TODO: Consider returning a reference to a widget    getSelectionCoords: function() {        throw new Error( "Selector.getSelectionCoords() is not defined for: " + this );    },        // Gets the color (in hexadecimal format) of the line that denotes the selection area.    //    // RETURNS String    getLineColor: function() {        throw new Error( "Selector.getLineColor() is not defined for: " + this );    },        // Sets the color (in hexadecimal format) of the line that denotes the selection area.    //    // RETURNS void    setLineColor: function( lineColor ) {        throw new Error( "Selector.setLineColor( lineColor ) is not defined for: " + this );    },        onSelectionComplete: LSDev.Common.Javascript.Event}